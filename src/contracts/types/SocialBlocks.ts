/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type UserInfoStruct = {
  userName: string;
  displayName: string;
  bio: string;
  image: string;
};

export type UserInfoStructOutput = [string, string, string, string] & {
  userName: string;
  displayName: string;
  bio: string;
  image: string;
};

export type PostInfoStruct = {
  buyStatus: BigNumberish;
  sellValue: BigNumberish;
  bidDuration: BigNumberish;
  uri: string;
};

export type PostInfoStructOutput = [number, BigNumber, BigNumber, string] & {
  buyStatus: number;
  sellValue: BigNumber;
  bidDuration: BigNumber;
  uri: string;
};

export interface SocialBlocksInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bid(uint256)": FunctionFragment;
    "buyPost(uint256)": FunctionFragment;
    "changeAdminAddress(address)": FunctionFragment;
    "changePostInfo(uint256,uint8,uint256,uint256)": FunctionFragment;
    "changePostPrice(uint256,uint256)": FunctionFragment;
    "changePostStatus(uint256,uint8)": FunctionFragment;
    "changeRewardFactor(uint256)": FunctionFragment;
    "changeRewardToken(address)": FunctionFragment;
    "claimBid(uint256)": FunctionFragment;
    "claimPostReward(uint256,uint256,bytes,bytes32)": FunctionFragment;
    "createAccount((string,string,string,string))": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getLastBidInfoById(uint256)": FunctionFragment;
    "getOwnerById(uint256)": FunctionFragment;
    "getPostInfo(uint256)": FunctionFragment;
    "idToLikes(uint256)": FunctionFragment;
    "idToOwner(uint256)": FunctionFragment;
    "isAddressReserved(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isNameReserved(string)": FunctionFragment;
    "mint(uint8,uint256,uint256,string)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "postLastBidder(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardClaimed(address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toLower(string)": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateUserInfo((string,string,string,string))": FunctionFragment;
    "userBid(address,uint256)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "userName(address)": FunctionFragment;
    "userPostIds(address,uint256)": FunctionFragment;
    "validateName(string)": FunctionFragment;
    "verify(address,bytes,bytes32)": FunctionFragment;
    "walletOfOwner(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "buyPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdminAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changePostInfo",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePostPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePostStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRewardFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPostReward",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [UserInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBidInfoById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToLikes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressReserved",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isNameReserved",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postLastBidder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "toLower", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserInfo",
    values: [UserInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "userBid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "userName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userPostIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "walletOfOwner",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePostInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePostPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePostStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPostReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBidInfoById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPostInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToLikes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idToOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAddressReserved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNameReserved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postLastBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toLower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPostIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "walletOfOwner",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreated(address,string,string,string,string)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BidPlaced(address,uint256,uint256)": EventFragment;
    "BiddableTokenPurchased(address,address,uint256,uint256)": EventFragment;
    "InfoChanged(string,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PostCreated(uint256,address,string,uint8,uint256)": EventFragment;
    "PostDetailsChanged(uint256,uint8,uint256,uint256)": EventFragment;
    "PostRewardClaimed(address,uint256,uint256)": EventFragment;
    "PostSold(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BiddableTokenPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InfoChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostDetailsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AccountCreatedEvent = TypedEvent<
  [string, string, string, string, string],
  {
    user: string;
    userName: string;
    displayName: string;
    bio: string;
    image: string;
  }
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BidPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { bidder: string; postId: BigNumber; bidAmount: BigNumber }
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export type BiddableTokenPurchasedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { oldOwner: string; newOwner: string; amount: BigNumber; id: BigNumber }
>;

export type BiddableTokenPurchasedEventFilter =
  TypedEventFilter<BiddableTokenPurchasedEvent>;

export type InfoChangedEvent = TypedEvent<
  [string, string, string],
  { displayName: string; bio: string; image: string }
>;

export type InfoChangedEventFilter = TypedEventFilter<InfoChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PostCreatedEvent = TypedEvent<
  [BigNumber, string, string, number, BigNumber],
  {
    id: BigNumber;
    sender: string;
    uri: string;
    buyStatus: number;
    sellValue: BigNumber;
  }
>;

export type PostCreatedEventFilter = TypedEventFilter<PostCreatedEvent>;

export type PostDetailsChangedEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber],
  {
    postId: BigNumber;
    status: number;
    price: BigNumber;
    bidDuration: BigNumber;
  }
>;

export type PostDetailsChangedEventFilter =
  TypedEventFilter<PostDetailsChangedEvent>;

export type PostRewardClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; postId: BigNumber; reward: BigNumber }
>;

export type PostRewardClaimedEventFilter =
  TypedEventFilter<PostRewardClaimedEvent>;

export type PostSoldEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { from: string; to: string; amount: BigNumber; id: BigNumber }
>;

export type PostSoldEventFilter = TypedEventFilter<PostSoldEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface SocialBlocks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SocialBlocksInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bid(
      _postId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyPost(
      _postId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAdminAddress(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePostInfo(
      _postId: BigNumberish,
      _buyStatus: BigNumberish,
      _price: BigNumberish,
      _bidDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePostPrice(
      _postId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePostStatus(
      _postId: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRewardFactor(
      _rewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBid(
      _postId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPostReward(
      _postId: BigNumberish,
      _likesCount: BigNumberish,
      _signature: BytesLike,
      signedMessageHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      _userInfo: UserInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastBidInfoById(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    getOwnerById(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPostInfo(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PostInfoStructOutput]>;

    idToLikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    idToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    isAddressReserved(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNameReserved(
      nameString: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _buyStatus: BigNumberish,
      _sellValue: BigNumberish,
      _bidDuration: BigNumberish,
      tokenURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    postLastBidder(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toLower(str: string, overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserInfo(
      _userInfo: UserInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBid(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        userName: string;
        displayName: string;
        bio: string;
        image: string;
      }
    >;

    userName(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    userPostIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateName(str: string, overrides?: CallOverrides): Promise<[boolean]>;

    verify(
      _signer: string,
      _signature: BytesLike,
      signedMessageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    walletOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  bid(
    _postId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyPost(
    _postId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAdminAddress(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePostInfo(
    _postId: BigNumberish,
    _buyStatus: BigNumberish,
    _price: BigNumberish,
    _bidDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePostPrice(
    _postId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePostStatus(
    _postId: BigNumberish,
    _status: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRewardFactor(
    _rewardFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRewardToken(
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBid(
    _postId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPostReward(
    _postId: BigNumberish,
    _likesCount: BigNumberish,
    _signature: BytesLike,
    signedMessageHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    _userInfo: UserInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastBidInfoById(
    _postId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber]>;

  getOwnerById(
    _postId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPostInfo(
    _postId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PostInfoStructOutput>;

  idToLikes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  idToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isAddressReserved(
    _address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNameReserved(
    nameString: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _buyStatus: BigNumberish,
    _sellValue: BigNumberish,
    _bidDuration: BigNumberish,
    tokenURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  postLastBidder(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toLower(str: string, overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserInfo(
    _userInfo: UserInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBid(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      userName: string;
      displayName: string;
      bio: string;
      image: string;
    }
  >;

  userName(arg0: string, overrides?: CallOverrides): Promise<string>;

  userPostIds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateName(str: string, overrides?: CallOverrides): Promise<boolean>;

  verify(
    _signer: string,
    _signature: BytesLike,
    signedMessageHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  walletOfOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bid(_postId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    buyPost(_postId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeAdminAddress(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changePostInfo(
      _postId: BigNumberish,
      _buyStatus: BigNumberish,
      _price: BigNumberish,
      _bidDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePostPrice(
      _postId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePostStatus(
      _postId: BigNumberish,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRewardFactor(
      _rewardFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRewardToken(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBid(_postId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimPostReward(
      _postId: BigNumberish,
      _likesCount: BigNumberish,
      _signature: BytesLike,
      signedMessageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(
      _userInfo: UserInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastBidInfoById(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    getOwnerById(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPostInfo(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PostInfoStructOutput>;

    idToLikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isAddressReserved(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNameReserved(
      nameString: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      _buyStatus: BigNumberish,
      _sellValue: BigNumberish,
      _bidDuration: BigNumberish,
      tokenURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    postLastBidder(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toLower(str: string, overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserInfo(
      _userInfo: UserInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    userBid(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        userName: string;
        displayName: string;
        bio: string;
        image: string;
      }
    >;

    userName(arg0: string, overrides?: CallOverrides): Promise<string>;

    userPostIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateName(str: string, overrides?: CallOverrides): Promise<boolean>;

    verify(
      _signer: string,
      _signature: BytesLike,
      signedMessageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    walletOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "AccountCreated(address,string,string,string,string)"(
      user?: null,
      userName?: null,
      displayName?: null,
      bio?: null,
      image?: null
    ): AccountCreatedEventFilter;
    AccountCreated(
      user?: null,
      userName?: null,
      displayName?: null,
      bio?: null,
      image?: null
    ): AccountCreatedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BidPlaced(address,uint256,uint256)"(
      bidder?: null,
      postId?: null,
      bidAmount?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      bidder?: null,
      postId?: null,
      bidAmount?: null
    ): BidPlacedEventFilter;

    "BiddableTokenPurchased(address,address,uint256,uint256)"(
      oldOwner?: null,
      newOwner?: null,
      amount?: null,
      id?: null
    ): BiddableTokenPurchasedEventFilter;
    BiddableTokenPurchased(
      oldOwner?: null,
      newOwner?: null,
      amount?: null,
      id?: null
    ): BiddableTokenPurchasedEventFilter;

    "InfoChanged(string,string,string)"(
      displayName?: null,
      bio?: null,
      image?: null
    ): InfoChangedEventFilter;
    InfoChanged(
      displayName?: null,
      bio?: null,
      image?: null
    ): InfoChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PostCreated(uint256,address,string,uint8,uint256)"(
      id?: null,
      sender?: null,
      uri?: null,
      buyStatus?: null,
      sellValue?: null
    ): PostCreatedEventFilter;
    PostCreated(
      id?: null,
      sender?: null,
      uri?: null,
      buyStatus?: null,
      sellValue?: null
    ): PostCreatedEventFilter;

    "PostDetailsChanged(uint256,uint8,uint256,uint256)"(
      postId?: null,
      status?: null,
      price?: null,
      bidDuration?: null
    ): PostDetailsChangedEventFilter;
    PostDetailsChanged(
      postId?: null,
      status?: null,
      price?: null,
      bidDuration?: null
    ): PostDetailsChangedEventFilter;

    "PostRewardClaimed(address,uint256,uint256)"(
      user?: null,
      postId?: null,
      reward?: null
    ): PostRewardClaimedEventFilter;
    PostRewardClaimed(
      user?: null,
      postId?: null,
      reward?: null
    ): PostRewardClaimedEventFilter;

    "PostSold(address,address,uint256,uint256)"(
      from?: null,
      to?: null,
      amount?: null,
      id?: null
    ): PostSoldEventFilter;
    PostSold(
      from?: null,
      to?: null,
      amount?: null,
      id?: null
    ): PostSoldEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      _postId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyPost(
      _postId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAdminAddress(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePostInfo(
      _postId: BigNumberish,
      _buyStatus: BigNumberish,
      _price: BigNumberish,
      _bidDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePostPrice(
      _postId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePostStatus(
      _postId: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRewardFactor(
      _rewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBid(
      _postId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPostReward(
      _postId: BigNumberish,
      _likesCount: BigNumberish,
      _signature: BytesLike,
      signedMessageHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccount(
      _userInfo: UserInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastBidInfoById(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerById(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPostInfo(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToLikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAddressReserved(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNameReserved(
      nameString: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _buyStatus: BigNumberish,
      _sellValue: BigNumberish,
      _bidDuration: BigNumberish,
      tokenURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postLastBidder(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toLower(str: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserInfo(
      _userInfo: UserInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBid(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userName(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userPostIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateName(str: string, overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      _signer: string,
      _signature: BytesLike,
      signedMessageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      _postId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyPost(
      _postId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAdminAddress(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePostInfo(
      _postId: BigNumberish,
      _buyStatus: BigNumberish,
      _price: BigNumberish,
      _bidDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePostPrice(
      _postId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePostStatus(
      _postId: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRewardFactor(
      _rewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBid(
      _postId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPostReward(
      _postId: BigNumberish,
      _likesCount: BigNumberish,
      _signature: BytesLike,
      signedMessageHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      _userInfo: UserInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastBidInfoById(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerById(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPostInfo(
      _postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToLikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAddressReserved(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNameReserved(
      nameString: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _buyStatus: BigNumberish,
      _sellValue: BigNumberish,
      _bidDuration: BigNumberish,
      tokenURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postLastBidder(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toLower(
      str: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserInfo(
      _userInfo: UserInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBid(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPostIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateName(
      str: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      _signer: string,
      _signature: BytesLike,
      signedMessageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
