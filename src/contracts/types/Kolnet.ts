/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type CampaignDetailsStruct = {
  investmentClaimed: BigNumberish;
  preSaleToken: string;
  campaignOwner: string;
  secondOwner: string;
  requiredInvestment: BigNumberish;
  marketingBudget: BigNumberish;
  startDate: BigNumberish;
  endDate: BigNumberish;
  remainingInvestment: BigNumberish;
  numberOfPostsReq: BigNumberish;
  stakingAmount: BigNumberish;
  enteredInvestmentAgainstMarketingBudget: BigNumberish;
  presaleAmount: BigNumberish;
  isKolInvestment: boolean;
};

export type CampaignDetailsStructOutput = [
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  investmentClaimed: BigNumber;
  preSaleToken: string;
  campaignOwner: string;
  secondOwner: string;
  requiredInvestment: BigNumber;
  marketingBudget: BigNumber;
  startDate: BigNumber;
  endDate: BigNumber;
  remainingInvestment: BigNumber;
  numberOfPostsReq: BigNumber;
  stakingAmount: BigNumber;
  enteredInvestmentAgainstMarketingBudget: BigNumber;
  presaleAmount: BigNumber;
  isKolInvestment: boolean;
};

export type VestingDetailsStruct = {
  isVestingInEnabled: boolean;
  NumberOfvestings: BigNumberish;
  vestingCycleDuration: BigNumberish;
  vestingAmtPerCycle: BigNumberish;
};

export type VestingDetailsStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  isVestingInEnabled: boolean;
  NumberOfvestings: BigNumber;
  vestingCycleDuration: BigNumber;
  vestingAmtPerCycle: BigNumber;
};

export type TGEStruct = {
  isTGE: boolean;
  tgePercentage: BigNumberish;
  tgeDate: BigNumberish;
  tgeAmount: BigNumberish;
  amountOfTGEDateUpdation: BigNumberish;
  TGEUpdationDone: BigNumberish;
};

export type TGEStructOutput = [
  boolean,
  number,
  BigNumber,
  BigNumber,
  number,
  number
] & {
  isTGE: boolean;
  tgePercentage: number;
  tgeDate: BigNumber;
  tgeAmount: BigNumber;
  amountOfTGEDateUpdation: number;
  TGEUpdationDone: number;
};

export type CampaignStruct = {
  campaignNumber: BigNumberish;
  campaignData: CampaignDetailsStruct;
  vestingData: VestingDetailsStruct;
  tgeDetails: TGEStruct;
};

export type CampaignStructOutput = [
  BigNumber,
  CampaignDetailsStructOutput,
  VestingDetailsStructOutput,
  TGEStructOutput
] & {
  campaignNumber: BigNumber;
  campaignData: CampaignDetailsStructOutput;
  vestingData: VestingDetailsStructOutput;
  tgeDetails: TGEStructOutput;
};

export type KOLStruct = {
  kolWallet: string;
  kolID: BigNumberish;
  name: string;
  ipfsHash: string;
};

export type KOLStructOutput = [string, BigNumber, string, string] & {
  kolWallet: string;
  kolID: BigNumber;
  name: string;
  ipfsHash: string;
};

export type CampaignDetailsInputStruct = {
  preSaleToken: string;
  campaignOwner: string;
  secondOwner: string;
  requiredInvestment: BigNumberish;
  marketingBudget: BigNumberish;
  startDate: BigNumberish;
  endTime: BigNumberish;
  numberOfPostsReq: BigNumberish;
  ipfsHash: string;
};

export type CampaignDetailsInputStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  preSaleToken: string;
  campaignOwner: string;
  secondOwner: string;
  requiredInvestment: BigNumber;
  marketingBudget: BigNumber;
  startDate: BigNumber;
  endTime: BigNumber;
  numberOfPostsReq: BigNumber;
  ipfsHash: string;
};

export type VestingDetailsInputStruct = {
  isVestingInEnabled: boolean;
  NumberOfvestings: BigNumberish;
  vestingCycleDuration: BigNumberish;
};

export type VestingDetailsInputStructOutput = [
  boolean,
  BigNumber,
  BigNumber
] & {
  isVestingInEnabled: boolean;
  NumberOfvestings: BigNumber;
  vestingCycleDuration: BigNumber;
};

export type SignatureStruct = { r: BytesLike; s: BytesLike; v: BigNumberish };

export type SignatureStructOutput = [string, string, number] & {
  r: string;
  s: string;
  v: number;
};

export interface KolnetInterface extends utils.Interface {
  functions: {
    "_penalty_per()": FunctionFragment;
    "_platformPer()": FunctionFragment;
    "_transactionPer()": FunctionFragment;
    "admin()": FunctionFragment;
    "blackListKOL(uint256,address,uint16)": FunctionFragment;
    "blackListedKOL(address,uint256)": FunctionFragment;
    "campaigns(uint256)": FunctionFragment;
    "claimBackInvestmentByKOL(uint256,uint256,bytes32,bytes32,uint8)": FunctionFragment;
    "claimKOLInvestment(uint256)": FunctionFragment;
    "claimPreSaleTokens(uint256,uint256,bytes32,bytes32,uint8)": FunctionFragment;
    "createCampaign((address,address,address,uint256,uint256,uint256,uint256,uint256,string),(bool,uint256,uint256),uint256,uint16,bytes32,bytes32,uint8)": FunctionFragment;
    "depositPreSaleTokens(uint256,uint256)": FunctionFragment;
    "generateTGE(uint256,address)": FunctionFragment;
    "investInCampaign(uint256,uint256,(bytes32,bytes32,uint8))": FunctionFragment;
    "investedCampaignDetails(address,uint256)": FunctionFragment;
    "kolInvestDetails(address,uint256)": FunctionFragment;
    "penaltyAmount()": FunctionFragment;
    "registerKOL(string,string)": FunctionFragment;
    "retriveCampaign(uint256)": FunctionFragment;
    "retriveKOL(address)": FunctionFragment;
    "setContractVariables(uint16[])": FunctionFragment;
    "setNewAdmin(address)": FunctionFragment;
    "setNumberOfCampaignsUpdations(uint256,uint16)": FunctionFragment;
    "setStakingContract(address)": FunctionFragment;
    "stakingPercentage()": FunctionFragment;
    "updateCampaign(uint256,uint256,address)": FunctionFragment;
    "updateKolData(string,string)": FunctionFragment;
    "withdawPresaleByCampaignOwner(uint256)": FunctionFragment;
    "withdrawPenaltyAndUpdateAddress(address,bool,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_penalty_per",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_platformPer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transactionPer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blackListKOL",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blackListedKOL",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBackInvestmentByKOL",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimKOLInvestment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPreSaleTokens",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      CampaignDetailsInputStruct,
      VestingDetailsInputStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPreSaleTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateTGE",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "investInCampaign",
    values: [BigNumberish, BigNumberish, SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "investedCampaignDetails",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kolInvestDetails",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "penaltyAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerKOL",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "retriveCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "retriveKOL", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractVariables",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setNewAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNumberOfCampaignsUpdations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaign",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKolData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdawPresaleByCampaignOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPenaltyAndUpdateAddress",
    values: [string, boolean, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "_penalty_per",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_platformPer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transactionPer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blackListKOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blackListedKOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBackInvestmentByKOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimKOLInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPreSaleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPreSaleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateTGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investInCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investedCampaignDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kolInvestDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "penaltyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerKOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retriveCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "retriveKOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumberOfCampaignsUpdations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdawPresaleByCampaignOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPenaltyAndUpdateAddress",
    data: BytesLike
  ): Result;

  events: {
    "BlackListedKol(address,uint256)": EventFragment;
    "CampaignCreated(tuple)": EventFragment;
    "CampaignDetailsUpdated(tuple)": EventFragment;
    "ClaimBackInvestment(uint256,uint256,uint256,address)": EventFragment;
    "ClaimKolInvestment(uint256,uint256,address)": EventFragment;
    "ClaimPreSaleTokens(uint256,uint256,address,address,uint256)": EventFragment;
    "ClaimPreSaleTokensBlackListed(uint256,uint256,uint256,address,address)": EventFragment;
    "ContractVariablesUpdated(uint16,uint16,uint16,uint16,uint256,address)": EventFragment;
    "DepositPreSaleTokens(uint256,uint256,uint256,address,address)": EventFragment;
    "InvestInCampaign(uint256,uint256,uint256,address)": EventFragment;
    "KOLAdded(tuple)": EventFragment;
    "SetMaxTGEAllowance(uint256)": EventFragment;
    "SetPenalty(uint256)": EventFragment;
    "TGEDeposited(uint256,uint256,uint256,uint256,address,address,uint256)": EventFragment;
    "WithdrawPenaltyAndUpdateAddress(bool,address,uint256)": EventFragment;
    "WithdrawPresaleByCampaignOwner(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlackListedKol"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignDetailsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimBackInvestment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimKolInvestment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPreSaleTokens"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClaimPreSaleTokensBlackListed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractVariablesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositPreSaleTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestInCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KOLAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxTGEAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPenalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TGEDeposited"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawPenaltyAndUpdateAddress"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawPresaleByCampaignOwner"
  ): EventFragment;
}

export type BlackListedKolEvent = TypedEvent<
  [string, BigNumber],
  { Kol: string; campaignId: BigNumber }
>;

export type BlackListedKolEventFilter = TypedEventFilter<BlackListedKolEvent>;

export type CampaignCreatedEvent = TypedEvent<
  [CampaignStructOutput],
  { _campaign: CampaignStructOutput }
>;

export type CampaignCreatedEventFilter = TypedEventFilter<CampaignCreatedEvent>;

export type CampaignDetailsUpdatedEvent = TypedEvent<
  [CampaignStructOutput],
  { _newCampaign: CampaignStructOutput }
>;

export type CampaignDetailsUpdatedEventFilter =
  TypedEventFilter<CampaignDetailsUpdatedEvent>;

export type ClaimBackInvestmentEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    campaign_Id: BigNumber;
    _progress: BigNumber;
    _investment: BigNumber;
    _kol: string;
  }
>;

export type ClaimBackInvestmentEventFilter =
  TypedEventFilter<ClaimBackInvestmentEvent>;

export type ClaimKolInvestmentEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { campaign_Id: BigNumber; _investment: BigNumber; _kol: string }
>;

export type ClaimKolInvestmentEventFilter =
  TypedEventFilter<ClaimKolInvestmentEvent>;

export type ClaimPreSaleTokensEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  {
    campaign_Id: BigNumber;
    _amount: BigNumber;
    _preSaleToken: string;
    _kol: string;
    progress: BigNumber;
  }
>;

export type ClaimPreSaleTokensEventFilter =
  TypedEventFilter<ClaimPreSaleTokensEvent>;

export type ClaimPreSaleTokensBlackListedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  {
    campaign_Id: BigNumber;
    _amountPST: BigNumber;
    _amountUSDT: BigNumber;
    _preSaleToken: string;
    _kol: string;
  }
>;

export type ClaimPreSaleTokensBlackListedEventFilter =
  TypedEventFilter<ClaimPreSaleTokensBlackListedEvent>;

export type ContractVariablesUpdatedEvent = TypedEvent<
  [number, number, number, number, BigNumber, string],
  {
    _stakingPerct: number;
    _penaltyPer: number;
    _transactionPer: number;
    _platformPer: number;
    _time: BigNumber;
    _updatedBy: string;
  }
>;

export type ContractVariablesUpdatedEventFilter =
  TypedEventFilter<ContractVariablesUpdatedEvent>;

export type DepositPreSaleTokensEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  {
    campaign_Id: BigNumber;
    _amount: BigNumber;
    _cummulativeDeposit: BigNumber;
    _token: string;
    _depositer: string;
  }
>;

export type DepositPreSaleTokensEventFilter =
  TypedEventFilter<DepositPreSaleTokensEvent>;

export type InvestInCampaignEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    campaign_Id: BigNumber;
    _amount: BigNumber;
    _investmentShare: BigNumber;
    _kol: string;
  }
>;

export type InvestInCampaignEventFilter =
  TypedEventFilter<InvestInCampaignEvent>;

export type KOLAddedEvent = TypedEvent<
  [KOLStructOutput],
  { _kol: KOLStructOutput }
>;

export type KOLAddedEventFilter = TypedEventFilter<KOLAddedEvent>;

export type SetMaxTGEAllowanceEvent = TypedEvent<
  [BigNumber],
  { _tge: BigNumber }
>;

export type SetMaxTGEAllowanceEventFilter =
  TypedEventFilter<SetMaxTGEAllowanceEvent>;

export type SetPenaltyEvent = TypedEvent<[BigNumber], { _penalty: BigNumber }>;

export type SetPenaltyEventFilter = TypedEventFilter<SetPenaltyEvent>;

export type TGEDepositedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string, BigNumber],
  {
    _campaignID: BigNumber;
    _tgeAmount: BigNumber;
    _tgeTime: BigNumber;
    _stakingAmount: BigNumber;
    _preSaleToken: string;
    _depositedBy: string;
    _cummulativeDeposit: BigNumber;
  }
>;

export type TGEDepositedEventFilter = TypedEventFilter<TGEDepositedEvent>;

export type WithdrawPenaltyAndUpdateAddressEvent = TypedEvent<
  [boolean, string, BigNumber],
  { isUpdateAdmin: boolean; _newAddress: string; penaltyAmount: BigNumber }
>;

export type WithdrawPenaltyAndUpdateAddressEventFilter =
  TypedEventFilter<WithdrawPenaltyAndUpdateAddressEvent>;

export type WithdrawPresaleByCampaignOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    owner: string;
    shareOfKolsInTermsToken: BigNumber;
    transferPresale: BigNumber;
  }
>;

export type WithdrawPresaleByCampaignOwnerEventFilter =
  TypedEventFilter<WithdrawPresaleByCampaignOwnerEvent>;

export interface Kolnet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KolnetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _penalty_per(overrides?: CallOverrides): Promise<[number]>;

    _platformPer(overrides?: CallOverrides): Promise<[number]>;

    _transactionPer(overrides?: CallOverrides): Promise<[number]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    blackListKOL(
      _campaignId: BigNumberish,
      _kol: string,
      progress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blackListedKOL(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    campaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        CampaignDetailsStructOutput,
        VestingDetailsStructOutput,
        TGEStructOutput
      ] & {
        campaignNumber: BigNumber;
        campaignData: CampaignDetailsStructOutput;
        vestingData: VestingDetailsStructOutput;
        tgeDetails: TGEStructOutput;
      }
    >;

    claimBackInvestmentByKOL(
      _campaignId: BigNumberish,
      progress: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimKOLInvestment(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPreSaleTokens(
      _campaignId: BigNumberish,
      progress: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCampaign(
      _newCampaignInput: CampaignDetailsInputStruct,
      _vestingInfoInput: VestingDetailsInputStruct,
      _tgeDate: BigNumberish,
      _tgePer: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositPreSaleTokens(
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateTGE(
      _campaignId: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investInCampaign(
      _campaignId: BigNumberish,
      _investment: BigNumberish,
      sign: SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investedCampaignDetails(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        investorKOL: string;
        campaignNumber: BigNumber;
        investedAmt: BigNumber;
        investShare: BigNumber;
        eligibleReward: BigNumber;
        vestingRewardPerCycle: BigNumber;
        lastVestingClaimed: BigNumber;
        claimedReward: BigNumber;
        leftOverReward: BigNumber;
        leftOverInvestment: BigNumber;
      }
    >;

    kolInvestDetails(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    penaltyAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerKOL(
      _name: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retriveCampaign(
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [CampaignStructOutput] & { campaignDetails: CampaignStructOutput }
    >;

    retriveKOL(
      _kol: string,
      overrides?: CallOverrides
    ): Promise<[KOLStructOutput] & { kol: KOLStructOutput }>;

    setContractVariables(
      contractVariables: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNumberOfCampaignsUpdations(
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingContract(
      _stakingCont: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingPercentage(overrides?: CallOverrides): Promise<[number]>;

    updateCampaign(
      _campaignId: BigNumberish,
      _tgeDate: BigNumberish,
      _preSaletoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateKolData(
      _name: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdawPresaleByCampaignOwner(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPenaltyAndUpdateAddress(
      _newAddress: string,
      isUpdateAdmin: boolean,
      wantToWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _penalty_per(overrides?: CallOverrides): Promise<number>;

  _platformPer(overrides?: CallOverrides): Promise<number>;

  _transactionPer(overrides?: CallOverrides): Promise<number>;

  admin(overrides?: CallOverrides): Promise<string>;

  blackListKOL(
    _campaignId: BigNumberish,
    _kol: string,
    progress: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blackListedKOL(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  campaigns(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      CampaignDetailsStructOutput,
      VestingDetailsStructOutput,
      TGEStructOutput
    ] & {
      campaignNumber: BigNumber;
      campaignData: CampaignDetailsStructOutput;
      vestingData: VestingDetailsStructOutput;
      tgeDetails: TGEStructOutput;
    }
  >;

  claimBackInvestmentByKOL(
    _campaignId: BigNumberish,
    progress: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimKOLInvestment(
    _campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPreSaleTokens(
    _campaignId: BigNumberish,
    progress: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCampaign(
    _newCampaignInput: CampaignDetailsInputStruct,
    _vestingInfoInput: VestingDetailsInputStruct,
    _tgeDate: BigNumberish,
    _tgePer: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositPreSaleTokens(
    _campaignId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateTGE(
    _campaignId: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investInCampaign(
    _campaignId: BigNumberish,
    _investment: BigNumberish,
    sign: SignatureStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investedCampaignDetails(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      investorKOL: string;
      campaignNumber: BigNumber;
      investedAmt: BigNumber;
      investShare: BigNumber;
      eligibleReward: BigNumber;
      vestingRewardPerCycle: BigNumber;
      lastVestingClaimed: BigNumber;
      claimedReward: BigNumber;
      leftOverReward: BigNumber;
      leftOverInvestment: BigNumber;
    }
  >;

  kolInvestDetails(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  penaltyAmount(overrides?: CallOverrides): Promise<BigNumber>;

  registerKOL(
    _name: string,
    _ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retriveCampaign(
    _campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CampaignStructOutput>;

  retriveKOL(_kol: string, overrides?: CallOverrides): Promise<KOLStructOutput>;

  setContractVariables(
    contractVariables: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNumberOfCampaignsUpdations(
    _campaignId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingContract(
    _stakingCont: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingPercentage(overrides?: CallOverrides): Promise<number>;

  updateCampaign(
    _campaignId: BigNumberish,
    _tgeDate: BigNumberish,
    _preSaletoken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateKolData(
    _name: string,
    _ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdawPresaleByCampaignOwner(
    _campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPenaltyAndUpdateAddress(
    _newAddress: string,
    isUpdateAdmin: boolean,
    wantToWithdraw: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _penalty_per(overrides?: CallOverrides): Promise<number>;

    _platformPer(overrides?: CallOverrides): Promise<number>;

    _transactionPer(overrides?: CallOverrides): Promise<number>;

    admin(overrides?: CallOverrides): Promise<string>;

    blackListKOL(
      _campaignId: BigNumberish,
      _kol: string,
      progress: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blackListedKOL(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    campaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        CampaignDetailsStructOutput,
        VestingDetailsStructOutput,
        TGEStructOutput
      ] & {
        campaignNumber: BigNumber;
        campaignData: CampaignDetailsStructOutput;
        vestingData: VestingDetailsStructOutput;
        tgeDetails: TGEStructOutput;
      }
    >;

    claimBackInvestmentByKOL(
      _campaignId: BigNumberish,
      progress: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimKOLInvestment(
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPreSaleTokens(
      _campaignId: BigNumberish,
      progress: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createCampaign(
      _newCampaignInput: CampaignDetailsInputStruct,
      _vestingInfoInput: VestingDetailsInputStruct,
      _tgeDate: BigNumberish,
      _tgePer: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositPreSaleTokens(
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    generateTGE(
      _campaignId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    investInCampaign(
      _campaignId: BigNumberish,
      _investment: BigNumberish,
      sign: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    investedCampaignDetails(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        investorKOL: string;
        campaignNumber: BigNumber;
        investedAmt: BigNumber;
        investShare: BigNumber;
        eligibleReward: BigNumber;
        vestingRewardPerCycle: BigNumber;
        lastVestingClaimed: BigNumber;
        claimedReward: BigNumber;
        leftOverReward: BigNumber;
        leftOverInvestment: BigNumber;
      }
    >;

    kolInvestDetails(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    penaltyAmount(overrides?: CallOverrides): Promise<BigNumber>;

    registerKOL(
      _name: string,
      _ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    retriveCampaign(
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CampaignStructOutput>;

    retriveKOL(
      _kol: string,
      overrides?: CallOverrides
    ): Promise<KOLStructOutput>;

    setContractVariables(
      contractVariables: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNewAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setNumberOfCampaignsUpdations(
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingContract(
      _stakingCont: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingPercentage(overrides?: CallOverrides): Promise<number>;

    updateCampaign(
      _campaignId: BigNumberish,
      _tgeDate: BigNumberish,
      _preSaletoken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKolData(
      _name: string,
      _ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdawPresaleByCampaignOwner(
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPenaltyAndUpdateAddress(
      _newAddress: string,
      isUpdateAdmin: boolean,
      wantToWithdraw: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlackListedKol(address,uint256)"(
      Kol?: null,
      campaignId?: null
    ): BlackListedKolEventFilter;
    BlackListedKol(Kol?: null, campaignId?: null): BlackListedKolEventFilter;

    "CampaignCreated(tuple)"(_campaign?: null): CampaignCreatedEventFilter;
    CampaignCreated(_campaign?: null): CampaignCreatedEventFilter;

    "CampaignDetailsUpdated(tuple)"(
      _newCampaign?: null
    ): CampaignDetailsUpdatedEventFilter;
    CampaignDetailsUpdated(
      _newCampaign?: null
    ): CampaignDetailsUpdatedEventFilter;

    "ClaimBackInvestment(uint256,uint256,uint256,address)"(
      campaign_Id?: null,
      _progress?: null,
      _investment?: null,
      _kol?: null
    ): ClaimBackInvestmentEventFilter;
    ClaimBackInvestment(
      campaign_Id?: null,
      _progress?: null,
      _investment?: null,
      _kol?: null
    ): ClaimBackInvestmentEventFilter;

    "ClaimKolInvestment(uint256,uint256,address)"(
      campaign_Id?: null,
      _investment?: null,
      _kol?: null
    ): ClaimKolInvestmentEventFilter;
    ClaimKolInvestment(
      campaign_Id?: null,
      _investment?: null,
      _kol?: null
    ): ClaimKolInvestmentEventFilter;

    "ClaimPreSaleTokens(uint256,uint256,address,address,uint256)"(
      campaign_Id?: null,
      _amount?: null,
      _preSaleToken?: null,
      _kol?: null,
      progress?: null
    ): ClaimPreSaleTokensEventFilter;
    ClaimPreSaleTokens(
      campaign_Id?: null,
      _amount?: null,
      _preSaleToken?: null,
      _kol?: null,
      progress?: null
    ): ClaimPreSaleTokensEventFilter;

    "ClaimPreSaleTokensBlackListed(uint256,uint256,uint256,address,address)"(
      campaign_Id?: null,
      _amountPST?: null,
      _amountUSDT?: null,
      _preSaleToken?: null,
      _kol?: null
    ): ClaimPreSaleTokensBlackListedEventFilter;
    ClaimPreSaleTokensBlackListed(
      campaign_Id?: null,
      _amountPST?: null,
      _amountUSDT?: null,
      _preSaleToken?: null,
      _kol?: null
    ): ClaimPreSaleTokensBlackListedEventFilter;

    "ContractVariablesUpdated(uint16,uint16,uint16,uint16,uint256,address)"(
      _stakingPerct?: null,
      _penaltyPer?: null,
      _transactionPer?: null,
      _platformPer?: null,
      _time?: null,
      _updatedBy?: null
    ): ContractVariablesUpdatedEventFilter;
    ContractVariablesUpdated(
      _stakingPerct?: null,
      _penaltyPer?: null,
      _transactionPer?: null,
      _platformPer?: null,
      _time?: null,
      _updatedBy?: null
    ): ContractVariablesUpdatedEventFilter;

    "DepositPreSaleTokens(uint256,uint256,uint256,address,address)"(
      campaign_Id?: null,
      _amount?: null,
      _cummulativeDeposit?: null,
      _token?: null,
      _depositer?: null
    ): DepositPreSaleTokensEventFilter;
    DepositPreSaleTokens(
      campaign_Id?: null,
      _amount?: null,
      _cummulativeDeposit?: null,
      _token?: null,
      _depositer?: null
    ): DepositPreSaleTokensEventFilter;

    "InvestInCampaign(uint256,uint256,uint256,address)"(
      campaign_Id?: null,
      _amount?: null,
      _investmentShare?: null,
      _kol?: null
    ): InvestInCampaignEventFilter;
    InvestInCampaign(
      campaign_Id?: null,
      _amount?: null,
      _investmentShare?: null,
      _kol?: null
    ): InvestInCampaignEventFilter;

    "KOLAdded(tuple)"(_kol?: null): KOLAddedEventFilter;
    KOLAdded(_kol?: null): KOLAddedEventFilter;

    "SetMaxTGEAllowance(uint256)"(_tge?: null): SetMaxTGEAllowanceEventFilter;
    SetMaxTGEAllowance(_tge?: null): SetMaxTGEAllowanceEventFilter;

    "SetPenalty(uint256)"(_penalty?: null): SetPenaltyEventFilter;
    SetPenalty(_penalty?: null): SetPenaltyEventFilter;

    "TGEDeposited(uint256,uint256,uint256,uint256,address,address,uint256)"(
      _campaignID?: null,
      _tgeAmount?: null,
      _tgeTime?: null,
      _stakingAmount?: null,
      _preSaleToken?: null,
      _depositedBy?: null,
      _cummulativeDeposit?: null
    ): TGEDepositedEventFilter;
    TGEDeposited(
      _campaignID?: null,
      _tgeAmount?: null,
      _tgeTime?: null,
      _stakingAmount?: null,
      _preSaleToken?: null,
      _depositedBy?: null,
      _cummulativeDeposit?: null
    ): TGEDepositedEventFilter;

    "WithdrawPenaltyAndUpdateAddress(bool,address,uint256)"(
      isUpdateAdmin?: null,
      _newAddress?: null,
      penaltyAmount?: null
    ): WithdrawPenaltyAndUpdateAddressEventFilter;
    WithdrawPenaltyAndUpdateAddress(
      isUpdateAdmin?: null,
      _newAddress?: null,
      penaltyAmount?: null
    ): WithdrawPenaltyAndUpdateAddressEventFilter;

    "WithdrawPresaleByCampaignOwner(address,uint256,uint256)"(
      owner?: null,
      shareOfKolsInTermsToken?: null,
      transferPresale?: null
    ): WithdrawPresaleByCampaignOwnerEventFilter;
    WithdrawPresaleByCampaignOwner(
      owner?: null,
      shareOfKolsInTermsToken?: null,
      transferPresale?: null
    ): WithdrawPresaleByCampaignOwnerEventFilter;
  };

  estimateGas: {
    _penalty_per(overrides?: CallOverrides): Promise<BigNumber>;

    _platformPer(overrides?: CallOverrides): Promise<BigNumber>;

    _transactionPer(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    blackListKOL(
      _campaignId: BigNumberish,
      _kol: string,
      progress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blackListedKOL(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBackInvestmentByKOL(
      _campaignId: BigNumberish,
      progress: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimKOLInvestment(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPreSaleTokens(
      _campaignId: BigNumberish,
      progress: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCampaign(
      _newCampaignInput: CampaignDetailsInputStruct,
      _vestingInfoInput: VestingDetailsInputStruct,
      _tgeDate: BigNumberish,
      _tgePer: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositPreSaleTokens(
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateTGE(
      _campaignId: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investInCampaign(
      _campaignId: BigNumberish,
      _investment: BigNumberish,
      sign: SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investedCampaignDetails(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kolInvestDetails(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penaltyAmount(overrides?: CallOverrides): Promise<BigNumber>;

    registerKOL(
      _name: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retriveCampaign(
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retriveKOL(_kol: string, overrides?: CallOverrides): Promise<BigNumber>;

    setContractVariables(
      contractVariables: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNumberOfCampaignsUpdations(
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingContract(
      _stakingCont: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    updateCampaign(
      _campaignId: BigNumberish,
      _tgeDate: BigNumberish,
      _preSaletoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateKolData(
      _name: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdawPresaleByCampaignOwner(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPenaltyAndUpdateAddress(
      _newAddress: string,
      isUpdateAdmin: boolean,
      wantToWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _penalty_per(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _platformPer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _transactionPer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blackListKOL(
      _campaignId: BigNumberish,
      _kol: string,
      progress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blackListedKOL(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBackInvestmentByKOL(
      _campaignId: BigNumberish,
      progress: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimKOLInvestment(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPreSaleTokens(
      _campaignId: BigNumberish,
      progress: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCampaign(
      _newCampaignInput: CampaignDetailsInputStruct,
      _vestingInfoInput: VestingDetailsInputStruct,
      _tgeDate: BigNumberish,
      _tgePer: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositPreSaleTokens(
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateTGE(
      _campaignId: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investInCampaign(
      _campaignId: BigNumberish,
      _investment: BigNumberish,
      sign: SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investedCampaignDetails(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kolInvestDetails(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    penaltyAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerKOL(
      _name: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retriveCampaign(
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retriveKOL(
      _kol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractVariables(
      contractVariables: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNumberOfCampaignsUpdations(
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingContract(
      _stakingCont: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCampaign(
      _campaignId: BigNumberish,
      _tgeDate: BigNumberish,
      _preSaletoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateKolData(
      _name: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdawPresaleByCampaignOwner(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPenaltyAndUpdateAddress(
      _newAddress: string,
      isUpdateAdmin: boolean,
      wantToWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
